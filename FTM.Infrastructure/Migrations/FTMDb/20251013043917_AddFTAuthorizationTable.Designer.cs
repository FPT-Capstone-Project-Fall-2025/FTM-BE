// <auto-generated />
using System;
using FTM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FTM.Infrastructure.Migrations.FTMDb
{
    [DbContext(typeof(FTMDbContext))]
    [Migration("20251013043917_AddFTAuthorizationTable")]
    partial class AddFTAuthorizationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FTM.Domain.Entities.Applications.MEthnic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MEthnics", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.MReligion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MReligions", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.MWard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameWithType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathWithType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MWards", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.Mprovince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameWithType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MProvinces", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FTId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FTMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeatureCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MethodCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FTId");

                    b.HasIndex("FTMemberId");

                    b.ToTable("FTAuthorizations", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BurialAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("BurialProvinceId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BurialWardId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeathDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EthnicId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FTId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeath")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrivacyData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReligionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("StoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WardId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurialProvinceId");

                    b.HasIndex("BurialWardId");

                    b.HasIndex("EthnicId");

                    b.HasIndex("FTId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("WardId");

                    b.ToTable("FTMembers", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTMemberFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FTMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UploadedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FTMemberId");

                    b.ToTable("FTMemberFiles", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryCode")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromFTMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromFTMemberPartnerId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ToFTMemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromFTMemberId");

                    b.HasIndex("FromFTMemberPartnerId");

                    b.HasIndex("ToFTMemberId");

                    b.ToTable("FTRelationships", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FamilyTree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GPModeCode")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FamilyTrees", (string)null);
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTAuthorization", b =>
                {
                    b.HasOne("FTM.Domain.Entities.FamilyTree.FamilyTree", "FamilyTree")
                        .WithMany("FTAuthorizations")
                        .HasForeignKey("FTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.FamilyTree.FTMember", "AuthorizedMember")
                        .WithMany("FTAuthorizations")
                        .HasForeignKey("FTMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorizedMember");

                    b.Navigation("FamilyTree");
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTMember", b =>
                {
                    b.HasOne("FTM.Domain.Entities.Applications.Mprovince", "BurialProvince")
                        .WithMany("BurialFTMembers")
                        .HasForeignKey("BurialProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.Applications.MWard", "BurialWard")
                        .WithMany("BurialFTMembers")
                        .HasForeignKey("BurialWardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.Applications.MEthnic", "Ethnic")
                        .WithMany("FTMembers")
                        .HasForeignKey("EthnicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.FamilyTree.FamilyTree", "FT")
                        .WithMany("FTMembers")
                        .HasForeignKey("FTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.Applications.Mprovince", "Province")
                        .WithMany("FTMembers")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.Applications.MReligion", "Religion")
                        .WithMany("FTMembers")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.Applications.MWard", "Ward")
                        .WithMany("FTMembers")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BurialProvince");

                    b.Navigation("BurialWard");

                    b.Navigation("Ethnic");

                    b.Navigation("FT");

                    b.Navigation("Province");

                    b.Navigation("Religion");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTMemberFile", b =>
                {
                    b.HasOne("FTM.Domain.Entities.FamilyTree.FTMember", "FTMember")
                        .WithMany("FTMemberFiles")
                        .HasForeignKey("FTMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FTMember");
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTRelationship", b =>
                {
                    b.HasOne("FTM.Domain.Entities.FamilyTree.FTMember", "FromFTMember")
                        .WithMany("FTRelationshipFrom")
                        .HasForeignKey("FromFTMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.FamilyTree.FTMember", "FromFTMemberPartner")
                        .WithMany("FTRelationshipFromPartner")
                        .HasForeignKey("FromFTMemberPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FTM.Domain.Entities.FamilyTree.FTMember", "ToFTMember")
                        .WithMany("FTRelationshipTo")
                        .HasForeignKey("ToFTMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromFTMember");

                    b.Navigation("FromFTMemberPartner");

                    b.Navigation("ToFTMember");
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.MEthnic", b =>
                {
                    b.Navigation("FTMembers");
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.MReligion", b =>
                {
                    b.Navigation("FTMembers");
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.MWard", b =>
                {
                    b.Navigation("BurialFTMembers");

                    b.Navigation("FTMembers");
                });

            modelBuilder.Entity("FTM.Domain.Entities.Applications.Mprovince", b =>
                {
                    b.Navigation("BurialFTMembers");

                    b.Navigation("FTMembers");
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FTMember", b =>
                {
                    b.Navigation("FTAuthorizations");

                    b.Navigation("FTMemberFiles");

                    b.Navigation("FTRelationshipFrom");

                    b.Navigation("FTRelationshipFromPartner");

                    b.Navigation("FTRelationshipTo");
                });

            modelBuilder.Entity("FTM.Domain.Entities.FamilyTree.FamilyTree", b =>
                {
                    b.Navigation("FTAuthorizations");

                    b.Navigation("FTMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
